// -*- c -*-

// *****************************************************************************
// The "//" pattern indicates a comment for a single line.
// The following string is ignored ant must considered as a comment only.

// *****************************************************************************
// The stu2srec tool is used to generate a S19 file by using a grammar based
// on the declaration of arrays.

// Unsigned Byte array 'UB[x,y,z,..]' is used to declare an array of unsigned bytes.
my_ub_array = UB[0x01, 0x02, 0x03, 0x04, 0xFF];

// Signed Byte array 'SB[x,y,z,..]' is used to declare an array of signed bytes.
my_sb_array = SB[-0x01,-0x02,-0x03,-0x04,-0x7F];

// Unsigned Word array 'UW[x,y,z..]' used to declare an array of unsigned words.
my_uw_array = UW[-0x0000, 0x0001, 0x0002, 0x0003, 0xFFFF];

// Signed Word array 'UW[x,y,z..]' used to declare an array of signed words.
my_sw_array = SW[-0x0001, -0x0002, -0x0003, -0x0004, -0x7FFF];

// Unsigned Long array 'UW[x,y,z..]' used to declare an array of unsigned longs.
my_ul_array = UL[0x00000001, 0x00000002, 0x00000003, 0x00000005,0xFFFFFFFF];

// Signed Word array 'UW[x,y,z..]' used to declare an array of signed Words.
my_sl_array = SL[-0x00000001, -0x00000002, -0x00000003, -0x00000005,-0x7FFFFFFF];

// Its also possible to convert floating data (32 bits, single precision) at binary format.
my_float_array = F32[0.12, 0.134, -1234.45787, 3.1418];

// It also possible to declare an array from any hexadecimal value.
my_hex_array=HEX["0123456789ABCDEF"];

// A string can be converted
my_string_array=TEXT["C'est pas facile d'écrire un tuto dans un anglais compréhensif !!"];

// The "*" can multiply the arrays.
my_multiplied_array = 2 * TEXT["J'en profite pour écrire en Français !!"];

// The "+" operator can be used for array concatenation.
my_all_arrays = my_ub_array
    + my_sb_array
    + my_uw_array
    + my_sw_array
    + my_ul_array
    + my_sl_array
    + my_float_array
    + my_hex_array
    + my_string_array
    + my_multiplied_array;

// *****************************************************************************
// The SIZE() service returns the lenght of an array in bytes.
// The result is not array but a single integer. Then an array encapsulation is needed according the user needs.
// The ">>" operator can be used to convert the size in words or longs.
my_all_array_bsize = UB[SIZE(my_all_arrays)];
my_all_array_wsize = UB[SIZE(my_all_arrays)>>1];
my_all_array_lsize = UB[SIZE(my_all_arrays)>>2];

// The BYTSUM() service returns the sum of the bytes of an array.
// The result is a single integet to encapsulate according to the needs.
my_bytesum_array = UL[BYTSUM(my_all_arrays)];

// *****************************************************************************
// Specific services can be used for :

// SACEM computation  : "SACEM[ msg => <N*4 bytes array>, svl => <2*4 bytes array> ]"
my_sacem_array = SACEM[msg => 10 * UL[0x12345678], svl => UL[0x1, 0x02]];

// CRC32 computation : "CRC32[msg => <N bytes>]"
my_crc32_array = CRC32[ msg => TEXT["C'est bientot la fin de ce tuto !!"]];

// CBC_MAC computation : "CBCMAC[msg => <N bytes>, keys_123 => <3 * 8 bytes>]
my_cbcmac_array = CBCMAC[msg      => TEXT["DES c'est la galère en python"],
                         keys_123 => HEX["0000000000000001"]   // key 1
                                   + HEX["0000000000000002"]   // key 2
                                   + HEX["0000000000000003"]]; // key 3

// *****************************************************************************
// The stu script must be ended with a "main" array.
// by considering the following structure.

// header    : size of the usefull following data mapped on 32 bits.
// data      : N bytes
// checksum  : byte summation of the header and the data together mapped on 32 bits.

data_array = my_all_arrays + my_sacem_array + my_crc32_array + my_cbcmac_array;
header_array = UL[SIZE(data_array)];
checksum_array = UL[BYTSUM(header_array + data_array)];

main = header_array + data_array + checksum_array;

// *****************************************************************************
// The S19 file is computed by means of the command : "stu2srec -i tutorial.stu -o tutorial.abs
// the stu2srec "-x" option can be used to declare an memory offset.



